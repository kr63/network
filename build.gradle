plugins {
    id 'java'
    id 'com.gradle.build-scan' version '2.2.1'
    id 'org.springframework.boot' version '2.0.5.RELEASE'
    id "org.flywaydb.flyway" version "5.2.4"
    id 'net.ltgt.apt' version '0.21'
    id 'net.ltgt.apt-idea' version '0.21'
    id 'jacoco'
}

apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
    mavenLocal()
}

ext {
    mapstructVersion = "1.3.0.Final"
    lombokVersion = "1.18.6"
    junitVersion = "5.4.1"
    jacocoVersion = "0.8.3"
}

group = 'com.example.network'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

bootJar {
    baseName = 'Demo'
    version = '0.1.0'
}

//flyway {
//    user = 'dbuser'
//    password = 'dbpass'
//    url = 'jdbc:postgresql://localhost:5432/dbname'
//    schemas = ['dbschema']
//}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-devtools'

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"
//    compile 'org.flywaydb:flyway-core'
//    compile 'org.postgresql:postgresql'

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.mapstruct:mapstruct:${mapstructVersion}"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit' //exclude junit4 by both name and group
    }

    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
}

jacoco {
    toolVersion = jacocoVersion
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
